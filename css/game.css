#game-wrapper {
    display: none;
}

.game-active #game-wrapper {
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 100%;
    height: 100%;
    margin-bottom: 30px;
}



#game-info {
    display: flex;
    flex-direction: column;
    align-items: center;
    flex-shrink: 0;
}

#level-timer-info {
    font-size: 1.2rem;
    color: var(--level-timer-color);
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 10px;
}

#timer-display {
    min-width: 5ch;
}

#level-timer-info .dot {
    color: var(--color-grid-cell);
}

#spots-display {
    font-size: 50px;
    font-family: math;
    margin: 0;
}

#level-time-display {
    color: var(--countdown-color);
    font-size: 50px;
    font-family: math;
    margin: 0;
}
#global-time-display {
    color: var(--global-time-color);
    font-size: 50px;
    font-family: math;
    margin: 0;
}


#lives-display {
    display: flex;
    gap: 8px;
    margin: 0;
}
.heart {
    font-family: math;
    font-size: 40px;
    background: linear-gradient(160deg, #ff4d4d, var(--countdown-color) 80%);
    -webkit-background-clip: text;
    background-clip: text;
    color: transparent;
    
    /* Make the heart pop with a subtle drop-shadow */
    text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.3);
}
.heart.heart-lost {
    animation: heart-lost-animation 0.5s cubic-bezier(0.6, -0.28, 0.735, 0.045) forwards;
}
@keyframes heart-lost-animation {
    0% { opacity: 1; transform: scale(1) rotate(0); }
    30% { transform: scale(1.2) rotate(-5deg); }
    100% { opacity: 0; transform: translateY(80px) translateX(-20px) rotate(45deg) scale(0); }
}




#game-grid-sizer {
    aspect-ratio: var(--grid-column-count) / var(--grid-row-count);
    width: auto;
    height: 100%;
    min-height: 0;
    max-height: 90vh;
    min-width: 0;
    max-width: 100%;
    
    display: flex;
    align-items: center;
    justify-content: center;

    /* set by js */
    --grid-column-count: 0;
    --grid-row-count: 0;
    --grid-tile-size: 0;

    --grid-tile-shadow: calc(0.03 * var(--grid-tile-size));
    --grid-block-height: calc(0.2 * var(--grid-tile-size));
}

#game-grid-container {
    position: relative;
    aspect-ratio: var(--grid-column-count) / var(--grid-row-count);
    width: 100%;
    height: auto;
    min-height: 0;
    max-height: 100%;
    min-width: 0;
    max-width: 100%;

    display: grid;

    border: 1vmin solid var(--color-grid-cell);
    padding: 1vmin;

    grid-template-columns: repeat(var(--grid-column-count), 1fr);

    background-color: rgb(from var(--color-bg) r g b / 0.5);
}






.tile {
    position: relative;
}

.tile:not(.wall) {
    border-radius: 10%;
    margin: 4%;
}


.tile.grid {
    background-color: var(--color-grid-cell);
    box-shadow: var(--grid-tile-shadow) var(--grid-tile-shadow) black;
    transition: translate 0.1s cubic-bezier(0.25, 0.1, 0.25, 1);
}
#game-grid-container.hint-active .tile[data-hint="true"] {
    translate: 0 calc(-0.2 * var(--grid-tile-size));
    z-index: 10;
    animation: hint-breathe 1.5s infinite cubic-bezier(0.4, 0, 0.6, 1);
    background-color: color-mix(in oklab, var(--color-grid-cell) 95%, var(--color-text) 5%);
}
#game-grid-container:not(.input-disabled) .tile.grid:hover {
    background-color: color-mix(in oklab, var(--color-grid-cell) 90%, var(--color-text) 10%);
    cursor: pointer;
}

@keyframes hint-breathe {
    0%, 100% {
        transform: translateY(0);
    }
    50% {
        transform: translateY(calc(-0.2 * var(--grid-tile-size)));
    }
}




.tile.block {
    translate: 0px calc(-1 * var(--grid-block-height));
    background-color: var(--tile-color);
    box-shadow: 0px calc(var(--grid-block-height) + var(--grid-tile-shadow)) color-mix(in oklab, var(--tile-color) 70%, black 30%);

    z-index: 5;
}
.tile-red { --tile-color: var(--tile-red-color); }
.tile-blue { --tile-color: var(--tile-blue-color);}
.tile-yellow { --tile-color: var(--tile-yellow-color); }
.tile-purple { --tile-color: var(--tile-purple-color); }
.tile-white { --tile-color: var(--tile-white-color); }
.tile.block.wall { --tile-color: var(--tile-wall-color); }




#tile-selector {
    display: flex;
    gap: 50px;
    background-color: var(--color-grid-cell);
    padding: 30px;
    border-radius: 15px;
    margin: 10px;
    flex-shrink: 0;
}
#tile-selector .tile.block {
    cursor: pointer;
    width: 60px;
    height: 60px;
    margin: 0;

    /* override .tile.block stuff */
    translate: 0px -20px;
    box-shadow: 0px 20px color-mix(in oklab, var(--tile-color) 70%, black 30%);
}
#tile-selector .tile.block.selected {
    outline: 3px solid white;
    outline-offset: 5px;
    border-radius: 5px;
}

#tile-selector .tile.block.future {
    cursor: auto;
    --tile-color: var(--tile-future-color);
}
#tile-selector .tile.block.future::after {
    content: '?';
    position: absolute;
    font-family: 'Arial Black', Gadget, sans-serif; /* A bold, blocky font */
    top: 50%; left: 50%;
    transform: translate(-50%, -50%);
    font-size: 50px;
    color: rgba(0, 0, 0, 0.5);
    text-shadow: 2px 2px rgba(255, 255, 255, 0.2);
}



#bottom-controls-wrapper {
    display: flex;
    flex-direction: row;
    align-items: center;
    gap: clamp(10px, 6vmin, 50px);
}



#home-button::before {
    content: '⌂';
    transform: translate(-50%, -65%);
}
#hint-button::before {
    content: '👁';
    transform: translate(-50%, -56%);
}

#hint-button > .button-counter.using-hint {
    color: gold;
}




#seed-display {
    font-size: 1.1rem;
    bottom: 0px;
    right: 5px;
    position: fixed;
    color: var(--color-seed-text);
}











@media (aspect-ratio > 1/1) {
    #game-wrapper {
        flex-direction: row !important;
    }

    #game-grid-sizer {
        width: 100%;
        height: auto;
    }
    #game-grid-container {
        width: auto;
        height: 100%;
    }

    #tile-selector,
    #bottom-controls-wrapper {
        flex-direction: column;
    }
}


















.invalid-line-indicator {
    position: absolute;
    background-color: var(--color-invalid-line);

    height: calc(var(--grid-tile-size) * 0.2);
    width: calc(var(--grid-tile-size) * var(--line-length));
    
    border-radius: calc(var(--grid-tile-size) * 0.2);
    pointer-events: none;
    transform-origin: 0 50%;
    z-index: 20;
    
    top: 50%;
    left: 50%;
    transform: translateY(-50%) rotate(var(--line-rotation));

    /* set by js */
    --line-length: 0;
    --line-rotation: 0deg;

    animation: wipeInLine 0.5s cubic-bezier(.3, .7, .4, 1);
}

@keyframes wipeInLine {
    0% {
        clip-path: inset(0 100% 0 0); /* Clip everything but the leftmost edge */
    }
    100% {
        clip-path: inset(0 0 0 0); /* Reveal the whole line */
    }
}









/* --- Particle Styles --- */
.particle-effect-wrapper {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    overflow: visible;
    pointer-events: none;
}

.tile-particle-fly-out {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 10%;
    height: 10%;
    border-radius: 50%;
    animation-name: particle-fly-out;
    animation-timing-function: cubic-bezier(0.1, 0.8, 0.4, 1);
    animation-fill-mode: forwards;
}

@keyframes particle-fly-out {
    70% {
      opacity: 1;
    }
    100% {
      transform: translate(0, -600%) scale(2);
      opacity: 0;
    }
}